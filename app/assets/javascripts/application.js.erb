// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require foundation
//= require select2
//= require d3
//= require_tree .

$(function(){ 
  $(document).foundation();

// Select2
  $("#countries").select2({ width: 'resolve' });
  $("#years").select2({ width: 'resolve' });

// Sticky footer
  $(window).bind("load", function () {
    var footer = $("#footer");
    var pos = footer.position();
    var height = $(window).height();
    height = height - pos.top;
    height = height - footer.height();
    if (height > 0) {
      footer.css({
        'margin-top': height + 'px'
      });
    }
  });

// D3
  var width = $('#options').innerWidth() - 30;
  var height = $('body').height() - ($('#options').position().top + $('#options').height()) - 30;
  var radius = Math.min(width, height) / 2;
  var negative_colors = d3.scale.ordinal().range(["#993F29", "#592518", "#D9593A", "#E65E3D", "#BF4F33"]);
  var positive_colors = d3.scale.ordinal().range(["#294D32", "#72D98E", "#4A8D5C", "#519A64", "#3D734B"]);
  var country_data = null;
  
  function draw() {
    var svg = d3.select("#graph .columns")
        .append("svg").data([country_data])
          .attr("width", width)
          .attr("height", height)
        .append("g")
          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var arc = d3.svg.arc()
        .outerRadius(radius - 10)
        .innerRadius(0);

    var in_pie = d3.layout.pie()
            .value(function(d) { return d.population; })
            .startAngle(-180 * (Math.PI/180))
            .endAngle(0 * (Math.PI/180));
    var out_pie = d3.layout.pie()
            .value(function(d) { return d.population; })
            .startAngle(0 * (Math.PI/180))
            .endAngle(180 * (Math.PI/180));
    var pos_arcs = svg.selectAll("g.pos_slice")
            .data(in_pie)
            .enter()
                .append("g")
                    .attr("class", "pos_slice");
    pos_arcs.append("path")
            .attr("fill", function(d, i) { 
              if(i == 6) {
                return '#fff';
              } else {
                return positive_colors(i);
              }
            })
            .attr("d", arc);
    pos_arcs.append("text")
            .attr("transform", function(d) {
                return "translate(" + arc.centroid(d) + ")";
            })
            .attr("text-anchor", "middle")
            .text(function(d, i) { return d.age; });

    var neg_arcs = svg.selectAll("g.neg_slice")
            .data(out_pie)
            .enter()
                .append("g")
                    .attr("class", "neg_slice");
    neg_arcs.append("path")
            .attr("fill", function(d, i) { return negative_colors(i); })
            .attr("d", arc);
    neg_arcs.append("text")
            .attr("transform", function(d) {
                return "translate(" + arc.centroid(d) + ")";
            })
            .attr("text-anchor", "middle")
            .text(function(d, i) { return d.age; });
  }

  d3.csv("<%= asset_path('data.csv') %>", function(error, data) {
    country_data = data;
    draw();
  });
});
